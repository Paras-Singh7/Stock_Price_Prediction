# -*- coding: utf-8 -*-
"""Stock Price Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ICcxZPpx3kgv-j001emFgQ-wlzbpl5S3
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
from matplotlib.pylab import rcParams
rcParams['figure.figsize']=20,10
from keras.models import Sequential
from keras.layers import LSTM,Dropout,Dense
from sklearn.preprocessing import MinMaxScaler
import datetime as dt
import pandas_datareader.data as pdr

#!pip install yfinance
import yfinance as yf

stock = input('Enter The Stock Ticker Symbol: ')
stock = stock.upper()

start_year = 2018
start_month = 1
start_day = 1
start = dt.datetime(start_year, start_month, start_day)
start

#!pip install --upgrade pandas
#!pip install --upgrade pandas-datareader

df = yf.download(tickers=stock, interval='1d')
df2 = pdr.DataReader(stock, 'yahoo', start)

df2.head()

df2.shape

new_data = pd.DataFrame({'Close':df2['Close']})

new_data.head()

plt.figure(figsize=(16,8))
plt.plot(new_data["Close"],label='Close Price history')

scaler=MinMaxScaler(feature_range=(0,1))
final_dataset=new_data.values

train_data=final_dataset[0:int(df2.shape[0]*0.8),:]
valid_data=final_dataset[int(df2.shape[0]*0.8):,:]

scaler=MinMaxScaler(feature_range=(0,1))
scaled_data=scaler.fit_transform(final_dataset)

scaled_data

x_train_data,y_train_data=[],[]
for i in range(60,len(train_data)):
    x_train_data.append(scaled_data[i-60:i,0])
    y_train_data.append(scaled_data[i,0])

train_data

x_train_data,y_train_data=np.array(x_train_data),np.array(y_train_data)

x_train_data=np.reshape(x_train_data,(x_train_data.shape[0],x_train_data.shape[1],1))

lstm_model=Sequential()
lstm_model.add(LSTM(units=50,return_sequences=True,input_shape=(x_train_data.shape[1],1)))
lstm_model.add(LSTM(units=50))
lstm_model.add(Dense(1))

inputs_data=new_data[len(new_data)-len(valid_data)-60:].values
inputs_data=inputs_data.reshape(-1,1)
inputs_data=scaler.transform(inputs_data)

lstm_model.compile(loss='mean_squared_error',optimizer='adam')
lstm_model.fit(x_train_data,y_train_data,epochs=1,batch_size=1,verbose=2)

X_test=[]
for i in range(60,inputs_data.shape[0]):
    X_test.append(inputs_data[i-60:i,0])
X_test=np.array(X_test)

X_test=np.reshape(X_test,(X_test.shape[0],X_test.shape[1],1))
predicted_closing_price=lstm_model.predict(X_test)

predicted_closing_price=scaler.inverse_transform(predicted_closing_price)

lstm_model.save("saved_model.h5")

train_data=new_data[:int(df2.shape[0]*0.8)]
valid_data=new_data[int(df2.shape[0]*0.8):]
valid_data['Predictions']=predicted_closing_price

plt.figure(figsize=(16,8))
plt.plot(train_data["Close"])
plt.plot(valid_data[['Close',"Predictions"]])